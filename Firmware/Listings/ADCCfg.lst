C51 COMPILER V9.60.0.0   ADCCFG                                                            11/09/2024 20:18:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ADCCFG
OBJECT MODULE PLACED IN .\Objects\ADCCfg.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Hardware\ADCCfg.c OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(.\include;.\StdDr
                    -iver\inc;.\Hardware) DEBUG PRINT(.\Listings\ADCCfg.lst) TABS(2) OBJECT(.\Objects\ADCCfg.obj)

line level    source

   1          #include "cms8s6990.h"
   2          #include "PinDefs.h"
   3          #include "ADCCfg.h"
   4          #include "ADCAsync.h"
   5          #include "delay.h"
   6          
   7          /**********************************************************************
   8          以下函数为ADC异步转换引擎实现功能所需的内部处理函数以及所需的内部全局变
   9          量。请不要随意修改函数内容，或者在除了本文件内的其他任何地方调用，否则
  10          会导致ADC引擎工作异常！ 
  11          **********************************************************************/
  12          static xdata ADCConvertTemp ADCTemp;
  13          static ADCAsyncStateDef ADCState; 
  14          static xdata char ADCConvertQueue[ADCConvertQueueDepth];  
  15          xdata bool IsNotAllowAsync;  //是否允许ADC引擎运行在异步模式
  16            
  17          //向ADC提交任务 
  18          static void ADC_SubmitMisson(char Ch) 
  19            {
  20   1        //检查传入的通道参数是否合法
  21   1        if(ADCTemp.IsMissionProcessing)return;
  22   1        if(ADC_CheckIfChInvalid(Ch))return; 
  23   1        //进行初始化
  24   1        ADCTemp.avgbuf=0;
  25   1        ADCTemp.Count=0;
  26   1        ADCTemp.Ch=Ch;
  27   1        ADCTemp.IsMissionProcessing=true;
  28   1        //配置ADC通道   
  29   1        if(Ch&0x10)ADCON0|=0x80;
  30   1        else ADCON0&=0x7F; //设置ADCHS[4]
  31   1        ADCON1&=0xF0;
  32   1        ADCON1|=(Ch&0x0F); //设置ADCHS[3:0]         
  33   1        //启动转换
  34   1        delay_us(150);  
  35   1        ADC_StartConv();
  36   1        } 
  37          
  38          //读取数据
  39          static int ADC_ReadBackResult(int *Result,char *Queue)  
  40            {
  41   1        //ADC未完成本次转换
  42   1        if(ADC_GetIfStillConv())return 0; 
  43   1        //收取结果
  44   1        ADCTemp.Count++; //数值+1
  45   1        ADCTemp.avgbuf+=(long)ADC_ReadConvResult(); //从AD寄存器收取结果并进行平均累加
  46   1        if(ADCTemp.Count<ADCAverageCount) 
  47   1          {
  48   2          ADC_StartConv();
  49   2          return 0;//平均次数未到，重新启动ADC进行新一轮的处理
  50   2          }
  51   1        //完成转换，返回结果并准备可以提交新的任务
  52   1        ADCTemp.avgbuf/=(long)ADCAverageCount;
  53   1        *Result=(int)ADCTemp.avgbuf; //返回结果
  54   1        *Queue=ADCTemp.Ch; //返回转换的队列
C51 COMPILER V9.60.0.0   ADCCFG                                                            11/09/2024 20:18:36 PAGE 2   

  55   1        ADCTemp.IsMissionProcessing=false; //任务已处理完毕
  56   1        return 1; 
  57   1        }
  58          
  59          //ADC设置电压参考 
  60          static void ADC_SetVREF(bit IsUsingVDD)
  61            {
  62   1        ADC_DisableCmd(); //转换ADC基准需要暂时关闭ADC  
  63   1        _nop_();
  64   1        ADC_SetVREFReg(IsUsingVDD); //设置芯片内部基准
  65   1        _nop_();
  66   1        ADC_EnableCmd(); //基准切换完毕，重新启动
  67   1        }
  68          //转换完毕后写输出引擎
  69          char CalcNTCTemp(bool *IsNTCOK,unsigned long NTCRes); //函数声明    
  70          
  71          static void ADC_WriteOutputBuf(int ADCResult,char Ch)
  72            {
  73   1        float Buf,Rt,Vadc;
  74   1        unsigned long NTCRES;
  75   1        //进行ADC
  76   1        Rt=ADC_IsUsingIVREF()?ADCVREF:Data.MCUVDD; //根据基准设置得到AD当前的基准电压
  77   1        Vadc=(float)ADCResult*(Rt/(float)4096);//将AD值转换为原始电压
  78   1        //状态机
  79   1        switch(Ch)
  80   1          {
  81   2          //计算参考电压
  82   2          case ADC_INTVREFCh:
  83   2            Buf=ADCBGVREF*(float)4096/(float)ADCResult;
  84   2            Data.MCUVDD=Buf; //计算出MCUVDD(VREF)
  85   2            break; 
  86   2          //计算电池电压
  87   2          case VBATInputAIN:
  88   2            Buf=(float)VBattLowerResK/(float)(VBattLowerResK+VBattUpperResK);//计算出分压电阻的系数
  89   2            Data.RawBattVolt=Vadc/Buf; //根据分压系数反推出电池电压
  90   2            if(Data.RawBattVolt<3.0)Data.RawBattVolt-=0.1; //进行修正
  91   2            Data.BatteryVoltage=Data.RawBattVolt/(float)VbattCellCount; //将3节电池的总电压转换为单节电池的电压
  92   2            break;
  93   2          //计算输出电压
  94   2          case VOUTFBAIN:   
  95   2            Buf=(float)VoutLowerResK/(float)(VoutLowerResK+VoutUpperResK);//计算出分压电阻的系数
  96   2            Data.OutputVoltage=Vadc/Buf; //根据分压系数反推出DCDC输出电压
  97   2            if(Data.OutputVoltage<3.0)Data.OutputVoltage-=0.1; //进行修正     
  98   2            break;
  99   2          //计算温度
 100   2          case NTCInputAIN:
 101   2            Rt=((float)NTCUpperResValueK*Vadc)/(Data.MCUVDD-Vadc);//得到NTC+单片机IO导通电阻的传感器温度值
 102   2            Rt*=1000; //将阻值从K欧转为Ω
 103   2            NTCRES=(unsigned long)Rt; //取整
 104   2            Data.Systemp=CalcNTCTemp(&Data.IsNTCOK,NTCRES); //计算温度
 105   2            break;
 106   2          }
 107   1        }
 108          
 109          //ADC异步引擎的主处理函数
 110          static void ADCEngineHandler(void)
 111            {
 112   1        int i,result;
 113   1        char Ch;
 114   1        //转换循环
 115   1        do
 116   1          {
C51 COMPILER V9.60.0.0   ADCCFG                                                            11/09/2024 20:18:36 PAGE 3   

 117   2          if(ADCState==ADC_ConvertComplete)ADCState=ADC_SubmitQueue; //如果一轮转换完成则重新开始
 118   2          switch(ADCState)
 119   2            {   
 120   3            //开始提交转换队列
 121   3            case ADC_SubmitQueue: 
 122   3              ADC_SetVREF(1); //每次提交队列之前，设置基准使用MCUVDD来转换温度和MCUVDD电压
 123   3              for(i=0;i<ADCConvertQueueDepth;i++)ADCConvertQueue[i]=ADCChQueue[i]; //把转换队列里面的数据复制过去
 124   3              ADCState=ADC_SubmitChFromQueue;
 125   3              break;
 126   3            //向ADC转换线程提交任务
 127   3            case ADC_SubmitChFromQueue: 
 128   3              i=0;
 129   3              while(i<ADCConvertQueueDepth)
 130   3                {
 131   4                if(!ADC_CheckIfChInvalid(ADCConvertQueue[i]))break; //找到队列中未完成的合法转换项目
 132   4                i++;
 133   4                }
 134   3              //有转换项目未完成
 135   3              if(i<ADCConvertQueueDepth)  
 136   3                {
 137   4                Ch=ADCConvertQueue[i]; //检测目标的通道值
 138   4                if(Ch==VBATInputAIN||Ch==VOUTFBAIN)ADC_SetVREF(0); //电池和输出电压转换使用内部精密通道
 139   4                ADC_SubmitMisson(Ch); //提交项目
 140   4                ADCState=ADC_WaitMissionDone;
 141   4                }
 142   3              //所有转换已完成，跳转到完成阶段
 143   3              else ADCState=ADC_ConvertComplete;    
 144   3              break;  
 145   3            //提交线程任务后等待本次任务完成
 146   3            case ADC_WaitMissionDone:
 147   3                if(!ADC_ReadBackResult(&result,&Ch))break; //尝试读取结果，转换未完成则继续
 148   3                ADC_WriteOutputBuf(result,Ch);
 149   3                for(i=0;i<4;i++)if(ADCConvertQueue[i]==Ch)ADCConvertQueue[i]=-2; //将当前已经完成转换的任务通道设置
             -为-2标记转换完毕
 150   3                ADCState=ADC_SubmitChFromQueue; //重新回到提交任务的阶段
 151   3                break;
 152   3            //所有任务已完成
 153   3            case ADC_ConvertComplete:break;
 154   3            //其余任何非法状态跳转到初始阶段
 155   3            default:ADCState=ADC_SubmitQueue;
 156   3            }
 157   2          }
 158   1        while(IsNotAllowAsync&&ADCState!=ADC_ConvertComplete);
 159   1        } 
 160            
 161          /**********************************************************************
 162          以下函数为ADC异步转换引擎以及ADC的初始化和除能操作和驱动引擎获取外部通
 163          道的电压数据所需的外部函数调用。您可以在初始化阶段和主函数内调用以下区
 164          域的函数对ADC进行初始化和除能操作，以及启动引擎对ADC进行异步采样。
 165          **********************************************************************/ 
 166          ADCResultStrDef Data;  //ADC结果输出
 167            
 168          //进行数据获取  
 169          void SystemTelemHandler(void)
 170            {
 171   1        //调用ADC异步引擎
 172   1        ADCEngineHandler();
 173   1        } 
 174            
 175          //关闭ADC
 176          void ADC_DeInit(void)
 177            {
C51 COMPILER V9.60.0.0   ADCCFG                                                            11/09/2024 20:18:36 PAGE 4   

 178   1        GPIOCfgDef ADCDeInitCfg;
 179   1        char i;   
 180   1        //配置寄存器关闭ADC
 181   1        ADCON1=0x00; //关闭ADC
 182   1        ADCLDO=0x00; //关闭片内基准
 183   1        //清空队列并复位异步引擎
 184   1        IsNotAllowAsync=1;    
 185   1        ADCState=ADC_SubmitQueue;
 186   1        for(i=0;i<ADCConvertQueueDepth;i++)ADCConvertQueue[i]=-2; 
 187   1        ADCTemp.avgbuf=0;
 188   1        ADCTemp.Count=0;
 189   1        ADCTemp.Ch=0;
 190   1        ADCTemp.IsMissionProcessing=false;  
 191   1        //将GPIO设置为普通模式
 192   1        GPIO_SetMUXMode(NTCInputIOG,NTCInputIOx,GPIO_AF_GPIO);
 193   1        GPIO_SetMUXMode(VOUTFBIOG,VOUTFBIOx,GPIO_AF_GPIO);
 194   1        GPIO_SetMUXMode(VBATInputIOG,VBATInputIOx,GPIO_AF_GPIO);  
 195   1        //设置为推挽输出
 196   1        ADCDeInitCfg.Mode=GPIO_Out_PP;
 197   1        ADCDeInitCfg.Slew=GPIO_Slow_Slew;   
 198   1        ADCDeInitCfg.DRVCurrent=GPIO_Low_Current; //配置为低电流推挽输出
 199   1        GPIO_ConfigGPIOMode(NTCInputIOG,GPIOMask(NTCInputIOx),&ADCDeInitCfg); 
 200   1        GPIO_ConfigGPIOMode(VOUTFBIOG,GPIOMask(VOUTFBIOx),&ADCDeInitCfg); 
 201   1        GPIO_ConfigGPIOMode(VBATInputIOG,GPIOMask(VBATInputIOx),&ADCDeInitCfg); //设置对应的输出
 202   1        //全部输出0
 203   1        GPIO_WriteBit(NTCInputIOG,NTCInputIOx,0);
 204   1        GPIO_WriteBit(VOUTFBIOG,VOUTFBIOx,0);
 205   1        GPIO_WriteBit(VBATInputIOG,VBATInputIOx,0);
 206   1        GPIO_WriteBit(NTCENIOG,NTCENIOx,0); //令供电输出=0关闭NTC电源
 207   1        }
 208          
 209          //ADC初始化
 210          void ADC_Init(void)
 211            {
 212   1        GPIOCfgDef ADCInitCfg;
 213   1        //初始化GPIO
 214   1        ADCInitCfg.Mode=GPIO_Input_Floating;
 215   1        ADCInitCfg.Slew=GPIO_Slow_Slew;   
 216   1        ADCInitCfg.DRVCurrent=GPIO_Low_Current; //配置为浮空输入  
 217   1        
 218   1        GPIO_ConfigGPIOMode(VOUTFBIOG,GPIOMask(VOUTFBIOG),&ADCInitCfg); //将对应的IO设置为下拉输入
 219   1        GPIO_ConfigGPIOMode(VBATInputIOG,GPIOMask(VBATInputIOx),&ADCInitCfg); 
 220   1        GPIO_ConfigGPIOMode(NTCInputIOG,GPIOMask(NTCInputIOx),&ADCInitCfg);   
 221   1          
 222   1        GPIO_SetMUXMode(NTCInputIOG,NTCInputIOx,GPIO_AF_Analog);
 223   1        GPIO_SetMUXMode(VOUTFBIOG,VOUTFBIOx,GPIO_AF_Analog);
 224   1        GPIO_SetMUXMode(VBATInputIOG,VBATInputIOx,GPIO_AF_Analog); //将GPIO复用设置为模拟输入
 225   1        //配置并打开NTC分压电阻的供电
 226   1        ADCInitCfg.Mode=GPIO_Out_PP;
 227   1        ADCInitCfg.Slew=GPIO_Slow_Slew;   
 228   1        ADCInitCfg.DRVCurrent=GPIO_High_Current;   //大电流推挽输出
 229   1          
 230   1        GPIO_SetMUXMode(NTCENIOG,NTCENIOx,GPIO_AF_GPIO);
 231   1        GPIO_ConfigGPIOMode(NTCENIOG,GPIOMask(NTCENIOx),&ADCInitCfg);   
 232   1        GPIO_WriteBit(NTCENIOG,NTCENIOx,1); //令供电输出=1打开NTC电源
 233   1        //配置ADC
 234   1        ADCON0=0x40; //AN31=内部1.2V基准，结果右对齐
 235   1        ADCON1=0x60; //Fadc=Fsys/128=375KHz
 236   1        ADCON2=0x00; //关闭ADC硬件触发功能，使用软件命令启动ADC
 237   1        ADCMPC=0x00; //关闭ADC比较器触发刹车功能
 238   1        ADDLYL=0x00; //将ADC硬件启动触发延时设置为0
 239   1        ADCMPH=0x0F;
C51 COMPILER V9.60.0.0   ADCCFG                                                            11/09/2024 20:18:36 PAGE 5   

 240   1        ADCMPL=0xFF; //ADC比较器默认值设置为0x0FFF
 241   1        ADCLDO=0xA0; //使能芯片内置ADC基准，输出2.0V
 242   1        //初始化异步ADC引擎
 243   1        ADCState=ADC_SubmitQueue;
 244   1        ADCTemp.avgbuf=0;
 245   1        ADCTemp.Count=0;
 246   1        ADCTemp.Ch=0;
 247   1        ADCTemp.IsMissionProcessing=false;
 248   1        IsNotAllowAsync=true; //初始化时禁止异步功能  
 249   1        //获取一遍初始的系统数据
 250   1        ADC_EnableCmd(); //使能ADC模块
 251   1        SystemTelemHandler();
 252   1        } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1333    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
