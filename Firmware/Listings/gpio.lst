C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Objects\gpio.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE StdDriver\src\gpio.c OPTIMIZE(9,SPEED) BROWSE INCDIR(.\include;.\StdDriv
                    -er\inc;.\Hardware) DEBUG OBJECTEXTEND PRINT(.\Listings\gpio.lst) TABS(2) OBJECT(.\Objects\gpio.obj)

line level    source

   1          /*******************************************************************************
   2          * Copyright (C) 2019 China Micro Semiconductor Limited Company. All Rights Reserved.
   3          *
   4          * This software is owned and published by:
   5          * CMS LLC, No 2609-10, Taurus Plaza, TaoyuanRoad, NanshanDistrict, Shenzhen, China.
   6          *
   7          * BY DOWNLOADING, INSTALLING OR USING THIS SOFTWARE, YOU AGREE TO BE BOUND
   8          * BY ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT.
   9          *
  10          * This software contains source code for use with CMS
  11          * components. This software is licensed by CMS to be adapted only
  12          * for use in systems utilizing CMS components. CMS shall not be
  13          * responsible for misuse or illegal use of this software for devices not
  14          * supported herein. CMS is providing this software "AS IS" and will
  15          * not be responsible for issues arising from incorrect user implementation
  16          * of the software.
  17          *
  18          * This software may be replicated in part or whole for the licensed use,
  19          * with the restriction that this Disclaimer and Copyright notice must be
  20          * included with each copy of this software, whether used in part or whole,
  21          * at all times.
  22          */
  23          
  24          /****************************************************************************/
  25          /** \file gpio.c
  26          **
  27          ** 
  28          **
  29          **  History:
  30          **  
  31          *****************************************************************************/
  32          /****************************************************************************/
  33          /*  include files
  34          *****************************************************************************/
  35          #include "gpio.h"
  36          
  37          /****************************************************************************/
  38          /*  Local pre-processor symbols/macros('#define')
  39          ****************************************************************************/
  40          
  41          /****************************************************************************/
  42          /*  Global variable definitions(declared in header file with 'extern')
  43          ****************************************************************************/
  44          
  45          /****************************************************************************/
  46          /*  Local type definitions('typedef')
  47          ****************************************************************************/
  48          
  49          /****************************************************************************/
  50          /*  Local variable  definitions('static')
  51          ****************************************************************************/
  52          
  53          /****************************************************************************/
  54          /*  Local function prototypes('static')
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 2   

  55          ****************************************************************************/
  56          
  57          /****************************************************************************/
  58          /*  Function implementation - global ('extern') and local('static')
  59          ****************************************************************************/
  60          /****************************************************************************
  61           ** \brief   GPIO_ConfigGPIOMode
  62           **      配置GPIO模式
  63           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
  64           **        PinMSK: GPIO_PIN_0_MSK ~ GPIO_PIN_7_MSK  
  65           **        Cfg : 配置结构体
  66           **         |-Mode: GPIO_Input_Floating(输入浮空)
  67           **         |       GPIO_IPU(输入带上拉)
  68           **         |       GPIO_IPD(输入带下拉)
  69           **         |       GPIO_Out_PP(推挽输出)
  70           **         |       GPIO_Out_OD(开漏输出)
  71           **         |
  72           **         |-Slew: GPIO_Slow_Slew(慢斜率)  GPIO_Fast_Slew(块斜率)
  73           **         |-DRVCurrent: GPIO_Low_Current(低电流)  GPIO_High_Current(高电流) 
  74           ** \return  none
  75           ** \note   
  76           ***************************************************************************/
  77          void GPIO_ConfigGPIOMode( uint8_t Port, uint8_t PinMSK,GPIOCfgDef *Cfg)
  78          {
  79   1        
  80   1        int TRISMSK,ODMSK,UPMSK,RDMSK,DRMSK,SRMSK;
  81   1        //根据模式创建对应的mask
  82   1        switch(Cfg->Mode)
  83   1          {
  84   2          case GPIO_Input_Floating: //输入浮空
  85   2             TRISMSK=0xFF&(~PinMSK); //TRIS=0
  86   2             ODMSK=0xFF&(~PinMSK); //OD=0
  87   2             UPMSK=0xFF&(~PinMSK); //UR=0
  88   2             RDMSK=0xFF&(~PinMSK); //RD=0
  89   2             break;
  90   2          case GPIO_IPU: //输入带上拉
  91   2             TRISMSK=0xFF&(~PinMSK); //TRIS=0
  92   2             ODMSK=0xFF&(~PinMSK); //OD=0
  93   2             UPMSK=0x100|PinMSK; //UR=1
  94   2             RDMSK=0xFF&(~PinMSK); //RD=0
  95   2             break;
  96   2          case GPIO_IPD: //输入带下拉
  97   2             TRISMSK=0xFF&(~PinMSK); //TRIS=0
  98   2             ODMSK=0xFF&(~PinMSK); //OD=0
  99   2             UPMSK=0xFF&(~PinMSK); //UR=0
 100   2             RDMSK=0x100|PinMSK; //RD=1
 101   2             break;     
 102   2          case GPIO_Out_PP: //推挽输出
 103   2          case GPIO_Out_OD: //三态输入输出
 104   2             UPMSK=0xFF&(~PinMSK); //UR=0
 105   2             RDMSK=0xFF&(~PinMSK); //RD=0     
 106   2             TRISMSK=0x100|PinMSK; //TRIS=1
 107   2             ODMSK=(Cfg->Mode==GPIO_Out_OD)?0x100|PinMSK:0xFF&(~PinMSK);
 108   2          }
 109   1        SRMSK=(Cfg->Slew==GPIO_Slow_Slew)?0x100|PinMSK:0xFF&(~PinMSK);
 110   1        DRMSK=(Cfg->DRVCurrent==GPIO_Low_Current)?0x100|PinMSK:0xFF&(~PinMSK);
 111   1        //把mask写进对应寄存器
 112   1        switch(Port)
 113   1        {
 114   2          case GPIO0:
 115   2            P0TRIS=(TRISMSK&0x100)?P0TRIS|(TRISMSK&0xFF):P0TRIS&(TRISMSK&0xFF);
 116   2            P0OD=(ODMSK&0x100)?P0OD|(ODMSK&0xFF):P0OD&(ODMSK&0xFF);
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 3   

 117   2            P0UP=(UPMSK&0x100)?P0UP|(UPMSK&0xFF):P0UP&(UPMSK&0xFF);
 118   2            P0RD=(RDMSK&0x100)?P0RD|(RDMSK&0xFF):P0RD&(RDMSK&0xFF);
 119   2            P0DR=(DRMSK&0x100)?P0DR|(DRMSK&0xFF):P0DR&(DRMSK&0xFF);
 120   2            P0SR=(SRMSK&0x100)?P0SR|(SRMSK&0xFF):P0SR&(SRMSK&0xFF);
 121   2            break;
 122   2         case GPIO1:
 123   2            P1TRIS=(TRISMSK&0x100)?P1TRIS|(TRISMSK&0xFF):P1TRIS&(TRISMSK&0xFF);
 124   2            P1OD=(ODMSK&0x100)?P1OD|(ODMSK&0xFF):P1OD&(ODMSK&0xFF);
 125   2            P1UP=(UPMSK&0x100)?P1UP|(UPMSK&0xFF):P1UP&(UPMSK&0xFF);
 126   2            P1RD=(RDMSK&0x100)?P1RD|(RDMSK&0xFF):P1RD&(RDMSK&0xFF);
 127   2            P1DR=(DRMSK&0x100)?P1DR|(DRMSK&0xFF):P1DR&(DRMSK&0xFF);
 128   2            P1SR=(SRMSK&0x100)?P1SR|(SRMSK&0xFF):P1SR&(SRMSK&0xFF); 
 129   2            break;
 130   2         case GPIO2:
 131   2            P2TRIS=(TRISMSK&0x100)?P2TRIS|(TRISMSK&0xFF):P2TRIS&(TRISMSK&0xFF);
 132   2            P2OD=(ODMSK&0x100)?P2OD|(ODMSK&0xFF):P2OD&(ODMSK&0xFF);
 133   2            P2UP=(UPMSK&0x100)?P2UP|(UPMSK&0xFF):P2UP&(UPMSK&0xFF);
 134   2            P2RD=(RDMSK&0x100)?P2RD|(RDMSK&0xFF):P2RD&(RDMSK&0xFF);
 135   2            P2DR=(DRMSK&0x100)?P2DR|(DRMSK&0xFF):P2DR&(DRMSK&0xFF);
 136   2            P2SR=(SRMSK&0x100)?P2SR|(SRMSK&0xFF):P2SR&(SRMSK&0xFF); 
 137   2            break;
 138   2          case GPIO3:
 139   2            P3TRIS=(TRISMSK&0x100)?P3TRIS|(TRISMSK&0xFF):P3TRIS&(TRISMSK&0xFF);
 140   2            P3OD=(ODMSK&0x100)?P3OD|(ODMSK&0xFF):P3OD&(ODMSK&0xFF);
 141   2            P3UP=(UPMSK&0x100)?P3UP|(UPMSK&0xFF):P3UP&(UPMSK&0xFF);
 142   2            P3RD=(RDMSK&0x100)?P3RD|(RDMSK&0xFF):P3RD&(RDMSK&0xFF);
 143   2            P3DR=(DRMSK&0x100)?P3DR|(DRMSK&0xFF):P3DR&(DRMSK&0xFF);
 144   2            P3SR=(SRMSK&0x100)?P3SR|(SRMSK&0xFF):P3SR&(SRMSK&0xFF); 
 145   2            break;
 146   2        }
 147   1      }
 148          
 149           /********************************************************************************
 150           ** \brief   GPIO_EnableInt
 151           **      使能IO口的中断功能
 152           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 153           **         PinMSK: GPIO_PIN_0_MSK ~ GPIO_PIN_7_MSK      
 154           ** \return  none
 155           ** \note   
 156           **  (1)P0的PinMSK输入值范围：GPIO_PIN_0_MSK ~ GPIO_PIN_5_MSK
 157           **  (2)P1的PinMSK输入值范围：GPIO_PIN_3_MSK ~ GPIO_PIN_7_MSK
 158           **  (3)P2的PinMSK输入值范围：GPIO_PIN_1_MSK ~ GPIO_PIN_6_MSK
 159           **  (4)P3的PinMSK输入值范围：GPIO_PIN_0_MSK ~ GPIO_PIN_2_MSK、GPIO_PIN_5_MSK、GPIO_PIN_6_MSK
 160           ******************************************************************************/
 161          void GPIO_EnableInt(uint8_t Port, uint8_t PinMSK)
 162          {
 163   1        switch(Port)
 164   1        {
 165   2          case GPIO0:
 166   2            P0EXTIE |= PinMSK;
 167   2            break;
 168   2          case GPIO1:
 169   2            P1EXTIE |= PinMSK;
 170   2            break;    
 171   2          case GPIO2:
 172   2            P2EXTIE |= PinMSK;
 173   2            break;  
 174   2          case GPIO3:
 175   2            P3EXTIE |= PinMSK;
 176   2            break;
 177   2          default:
 178   2            break;  
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 4   

 179   2        }
 180   1      }
 181           /********************************************************************************
 182           ** \brief   GPIO_CheckIfIntEnabled
 183           **      检测对应IO口的中断功能是否激活
 184           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 185           **         PinMSK: GPIO_PIN_0_MSK ~ GPIO_PIN_7_MSK      
 186           ** \return  bit：如果中断开启，则返回1，否则返回0
 187           ** \note   
 188           **  (1)P0的PinMSK输入值范围：GPIO_PIN_0_MSK ~ GPIO_PIN_5_MSK
 189           **  (2)P1的PinMSK输入值范围：GPIO_PIN_3_MSK ~ GPIO_PIN_7_MSK
 190           **  (3)P2的PinMSK输入值范围：GPIO_PIN_1_MSK ~ GPIO_PIN_6_MSK
 191           **  (4)P3的PinMSK输入值范围：GPIO_PIN_0_MSK ~ GPIO_PIN_2_MSK、GPIO_PIN_5_MSK、GPIO_PIN_6_MSK
 192           ******************************************************************************/
 193          bit GPIO_CheckIfIntEnabled(uint8_t Port, uint8_t PinMSK)
 194          {
 195   1      switch(Port)
 196   1        {
 197   2          case GPIO0:
 198   2            if(P0EXTIE&PinMSK)return 1;
 199   2            break;
 200   2          case GPIO1:
 201   2            if(P1EXTIE&PinMSK)return 1;
 202   2            break;    
 203   2          case GPIO2:
 204   2            if(P2EXTIE&PinMSK)return 1;
 205   2            break;  
 206   2          case GPIO3:
 207   2            if(P3EXTIE&PinMSK)return 1;
 208   2            break;
 209   2        }
 210   1      //未找到合法值，返回0
 211   1      return 0;
 212   1      }
 213          /********************************************************************************
 214           ** \brief   GPIO_DisableInt
 215           **      关闭IO口的中断功能
 216           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 217           **         PinMSK: GPIO_PIN_0_MSK ~ GPIO_PIN_7_MSK      
 218           ** \return  none
 219           ** \note   
 220           **  (1)P0的PinMSK输入值范围：GPIO_PIN_0_MSK ~ GPIO_PIN_5_MSK
 221           **  (2)P1的PinMSK输入值范围：GPIO_PIN_3_MSK ~ GPIO_PIN_7_MSK
 222           **  (3)P2的PinMSK输入值范围：GPIO_PIN_1_MSK ~ GPIO_PIN_6_MSK
 223           **  (4)P3的PinMSK输入值范围：GPIO_PIN_0_MSK ~ GPIO_PIN_2_MSK、GPIO_PIN_5_MSK、GPIO_PIN_6_MSK
 224           ******************************************************************************/
 225          void GPIO_DisableInt(uint8_t Port, uint8_t PinMSK)
 226          {
 227   1        switch(Port)
 228   1        {
 229   2          case GPIO0:
 230   2            P0EXTIE &= ~PinMSK;
 231   2            break;
 232   2          case GPIO1:
 233   2            P1EXTIE &= ~PinMSK;
 234   2            break;    
 235   2          case GPIO2:
 236   2            P2EXTIE &= ~PinMSK;
 237   2            break;  
 238   2          case GPIO3:
 239   2            P3EXTIE &= ~PinMSK;
 240   2            break;
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 5   

 241   2          default:
 242   2            break;  
 243   2        }
 244   1      }
 245           /******************************************************************************
 246           ** \brief   GPIO_WriteBit
 247           **      设置GPIO输出的电平
 248           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 249           **         PinNum:  GPIO_PIN_0~GPIO_PIN_7 (0~7)     
 250           **         Val: 1(令对应的GPIO引脚输出1)
 251           **              0(令对应的GPIO引脚输出0)
 252           ** \return  无
 253           ** \note  
 254           **  (1)P0的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_5
 255           **  (2)P1的PinNum输入值范围：GPIO_PIN_3~GPIO_PIN_7
 256           **  (3)P2的PinNum输入值范围：GPIO_PIN_1~GPIO_PIN_6
 257           **  (4)P3的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_2、GPIO_PIN_5、GPIO_PIN_6
 258           ******************************************************************************/
 259          void GPIO_WriteBit(uint8_t Port, uint8_t PinNum,bit Val)
 260          {
 261   1       switch(Port)
 262   1          {
 263   2          case GPIO0:
 264   2             if(PinNum>5)return;
 265   2             if(Val)P0|=0x01<<PinNum;
 266   2             else P0&=~(0x01<<PinNum);
 267   2             break;
 268   2          case GPIO1:
 269   2             if(PinNum>7||PinNum<3)return;
 270   2             if(Val)P1|=0x01<<PinNum;
 271   2             else P1&=~(0x01<<PinNum);
 272   2             break;   
 273   2          case GPIO2:
 274   2             if(PinNum>6||PinNum<1)return;
 275   2             if(Val)P2|=0x01<<PinNum;
 276   2             else P2&=~(0x01<<PinNum);
 277   2             break;
 278   2          case GPIO3:
 279   2             if(PinNum>6)return;
 280   2             if(Val)P3|=0x01<<PinNum;
 281   2             else P3&=~(0x01<<PinNum);
 282   2             break;
 283   2          default:return; 
 284   2          }
 285   1      }
 286           /******************************************************************************
 287           ** \brief   GPIO_SetExtIntMode
 288           **      设置外部中断的相应模式
 289           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 290           **         PinNum:  GPIO_PIN_0~GPIO_PIN_7 (0~7)     
 291           **         Mode: GPIO_Int_Disable(关闭中断)
 292           **               GPIO_Int_Rising(仅上升沿触发中断)
 293           **               GPIO_Int_Falling(仅下降沿触发中断)
 294           **               GPIO_Int_DualEdge(上升沿和下降沿都触发中断)
 295           ** \return  无
 296           ** \note  
 297           **  (1)P0的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_5
 298           **  (2)P1的PinNum输入值范围：GPIO_PIN_3~GPIO_PIN_7
 299           **  (3)P2的PinNum输入值范围：GPIO_PIN_1~GPIO_PIN_6
 300           **  (4)P3的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_2、GPIO_PIN_5、GPIO_PIN_6
 301           ******************************************************************************/
 302          void GPIO_SetExtIntMode(uint8_t Port, uint8_t PinNum, uint8_t Mode)
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 6   

 303          {
 304   1       //检查参数
 305   1       volatile unsigned char xdata *PCFG;
 306   1       if(Mode>3)return;
 307   1       //开始设置
 308   1        switch(Port)
 309   1          {
 310   2          case GPIO0:
 311   2             if(PinNum>5)return;
 312   2             PCFG=&P00EICFG+PinNum;
 313   2             break;
 314   2          case GPIO1:
 315   2             if(PinNum>7||PinNum<3)return;
 316   2             PCFG=&P13EICFG+(PinNum-3);
 317   2             break;   
 318   2          case GPIO2:
 319   2             if(PinNum>6||PinNum<1)return;
 320   2             PCFG=&P21EICFG+(PinNum-1);
 321   2             break;
 322   2          case GPIO3:
 323   2             if(PinNum>6)return;
 324   2             PCFG=&P30EICFG+PinNum;
 325   2             break;
 326   2          default:return; 
 327   2          }
 328   1      *PCFG=Mode&0x03; //写入设置值
 329   1      }
 330          
 331           /******************************************************************************
 332           ** \brief   GPIO_GetExtIntMode
 333           **      获取指定GPIO的中断模式
 334           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 335           **         PinNum:  GPIO_PIN_0~GPIO_PIN_7 (0~7)     
 336           **        
 337           ** \return  int: GPIO_Int_Disable(关闭中断)
 338           **               GPIO_Int_Rising(仅上升沿触发中断)
 339           **               GPIO_Int_Falling(仅下降沿触发中断)
 340           **               GPIO_Int_DualEdge(上升沿和下降沿都触发中断)
 341           ** \note  
 342           **  (1)P0的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_5
 343           **  (2)P1的PinNum输入值范围：GPIO_PIN_3~GPIO_PIN_7
 344           **  (3)P2的PinNum输入值范围：GPIO_PIN_1~GPIO_PIN_6
 345           **  (4)P3的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_2、GPIO_PIN_5、GPIO_PIN_6
 346           ******************************************************************************/
 347          int GPIO_GetExtIntMode(uint8_t Port, uint8_t PinNum)
 348          {
 349   1       uint8_t flag;
 350   1       volatile unsigned char xdata *PCFG;
 351   1       //获取
 352   1        switch(Port)
 353   1          {
 354   2          case GPIO0:
 355   2             if(PinNum>5)return GPIO_Int_Disable;
 356   2             PCFG=&P00EICFG+PinNum;
 357   2             flag=P0EXTIE&(1<<PinNum);
 358   2             break;
 359   2          case GPIO1:
 360   2             if(PinNum>7||PinNum<3)return GPIO_Int_Disable;
 361   2             PCFG=&P13EICFG+(PinNum-3);
 362   2             flag=P1EXTIE&(1<<PinNum);
 363   2             break;   
 364   2          case GPIO2:
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 7   

 365   2             if(PinNum>6||PinNum<1)return GPIO_Int_Disable;
 366   2             PCFG=&P21EICFG+(PinNum-1);
 367   2             flag=P2EXTIE&(1<<PinNum);
 368   2             break;
 369   2          case GPIO3:
 370   2             if(PinNum>6)return GPIO_Int_Disable;
 371   2             PCFG=&P30EICFG+PinNum;
 372   2            flag=P3EXTIE&(1<<PinNum);
 373   2             break;
 374   2          default:return GPIO_Int_Disable;  
 375   2          }
 376   1      //返回设置值
 377   1      if(!flag)return GPIO_Int_Disable; //对应寄存器禁用中断
 378   1      return *PCFG&0x03; //返回寄存器值
 379   1      }
 380          
 381          /******************************************************************************
 382           ** \brief   GPIO_SetMUXMode
 383           **      设置GPIO复用功能的相应模式
 384           ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 385           **         PinNum:  GPIO_PIN_0~GPIO_PIN_7 (0~7)     
 386           **         Mode: GPIO_AF_GPIO(配置为GPIO)
 387           **               GPIO_AF_Analog(配置为模拟输入)
 388           **               GPIO_AF_CC0(定时器2比较输出通道0)
 389           **               GPIO_AF_CC1(定时器2比较输出通道1)
 390           **               GPIO_AF_CC2(定时器2比较输出通道2)
 391           **               GPIO_AF_CC3(定时器2比较输出通道3)
 392           **               GPIO_AF_U0TXD(串口0发送)
 393           **               GPIO_AF_U0RXD(串口0接收)
 394           **               GPIO_AF_U1TXD(串口1发送)
 395           **               GPIO_AF_U1RXD(串口1接收)
 396           **               GPIO_AF_SCL(内部IIC SCL)
 397           **               GPIO_AF_SDA(内部IIC SDA)
 398           **               GPIO_AF_SPINSS(SPI从机模式片选信号)
 399           **               GPIO_AF_SPICLK(SPI时钟信号)
 400           **               GPIO_AF_SPIMOSI(SPI主到从数据链路)
 401           **               GPIO_AF_SPIMISO(SPI从到主数据链路)
 402           **               GPIO_AF_PWMCH0(PWM通道0)
 403           **               GPIO_AF_PWMCH1(PWM通道1)
 404           **               GPIO_AF_PWMCH2(PWM通道2)
 405           **               GPIO_AF_PWMCH3(PWM通道3)
 406           **               GPIO_AF_PWMCH4(PWM通道4)
 407           **               GPIO_AF_PWMCH5(PWM通道5)
 408           **               GPIO_AF_BEEP(蜂鸣器驱动输出)
 409           **               GPIO_AF_ACMP0_O(模拟比较器比较输出0)
 410           **               GPIO_AF_ACMP1_O(模拟比较器比较输出1)
 411           ** \return  无
 412           ** \note  
 413           **  (1)P0的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_5
 414           **  (2)P1的PinNum输入值范围：GPIO_PIN_3~GPIO_PIN_7
 415           **  (3)P2的PinNum输入值范围：GPIO_PIN_1~GPIO_PIN_6
 416           **  (4)P3的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_2、GPIO_PIN_5、GPIO_PIN_6
 417           ******************************************************************************/
 418          void GPIO_SetMUXMode(uint8_t Port, uint8_t PinNum, uint8_t Mode)
 419          {
 420   1      //检查参数
 421   1       volatile unsigned char xdata *PCFG;
 422   1       if(Mode==2||Mode==3)return;
 423   1       if(Mode==0x19||Mode>0x1C)return;
 424   1       //开始设置
 425   1        switch(Port)
 426   1          {
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 8   

 427   2          case GPIO0:
 428   2             if(PinNum>5)return;
 429   2             PCFG=&P00CFG+PinNum;
 430   2             break;
 431   2          case GPIO1:
 432   2             if(PinNum>7||PinNum<3)return;
 433   2             PCFG=&P13CFG+(PinNum-3);
 434   2             break;   
 435   2          case GPIO2:
 436   2             if(PinNum>6||PinNum<1)return;
 437   2             PCFG=&P21CFG+(PinNum-1);
 438   2             break;
 439   2          case GPIO3:
 440   2             if(PinNum>6)return;
 441   2             PCFG=&P30CFG+PinNum;
 442   2             break;
 443   2          default:return; 
 444   2          }
 445   1      *PCFG=Mode&0x1F; //写入设置值
 446   1      }
 447          
 448          // /******************************************************************************
 449          // ** \brief   GPIO_GetIntFlag
 450          // **      获取中断标志
 451          // ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 452          // **         PinNum:  GPIO_PIN_0~GPIO_PIN_7 (0~7)     
 453          // ** \return  0：无中断产生
 454          // **      1：有中断产生
 455          // ** \note  
 456          // **  (1)P0的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_5
 457          // **  (2)P1的PinNum输入值范围：GPIO_PIN_3~GPIO_PIN_7
 458          // **  (3)P2的PinNum输入值范围：GPIO_PIN_1~GPIO_PIN_6
 459          // **  (4)P3的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_2、GPIO_PIN_5、GPIO_PIN_6
 460          // ******************************************************************************/
 461          //uint8_t  GPIO_GetIntFlag(uint8_t Port, uint8_t PinNum)
 462          //{
 463          //  uint8_t PinIntFlag = 0;
 464          //  switch(Port)
 465          //  {
 466          //    case GPIO0:
 467          //      PinIntFlag = P0EXTIF & (1<<PinNum);
 468          //      break;
 469          //    case GPIO1:
 470          //      PinIntFlag = P1EXTIF & (1<<PinNum);
 471          //      break;    
 472          //    case GPIO2:
 473          //      PinIntFlag = P2EXTIF & (1<<PinNum);
 474          //      break;  
 475          //    case GPIO3:
 476          //      PinIntFlag = P3EXTIF & (1<<PinNum);
 477          //      break;
 478          //    default:
 479          //      break;  
 480          //  }
 481          //  return( (PinIntFlag)? 1:0);
 482          //}
 483          // /********************************************************************************
 484          // ** \brief   GPIO_ClearIntFlag
 485          // **     清除中断标志位
 486          // ** \param [in] Port  ： GPIO0、GPIO1、GPIO2、GPIO3
 487          // **         PinNum:  GPIO_PIN_0~GPIO_PIN_7 (0~7)     
 488          // ** \return  none
C51 COMPILER V9.60.0.0   GPIO                                                              11/15/2024 17:30:59 PAGE 9   

 489          // ** \note  
 490          // **  (1)P0的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_5
 491          // **  (2)P1的PinNum输入值范围：GPIO_PIN_3~GPIO_PIN_7
 492          // **  (3)P2的PinNum输入值范围：GPIO_PIN_1~GPIO_PIN_6
 493          // **  (4)P3的PinNum输入值范围：GPIO_PIN_0~GPIO_PIN_2、GPIO_PIN_5、GPIO_PIN_6   
 494          // ******************************************************************************/
 495          //void GPIO_ClearIntFlag(uint8_t Port, uint8_t PinNum)
 496          //{
 497          //  switch(Port)
 498          //  {
 499          //    case GPIO0:
 500          //      P0EXTIF = 0xff &(~(1<<PinNum));
 501          //      break;
 502          //    case GPIO1:
 503          //      P1EXTIF = 0xff &(~(1<<PinNum));     
 504          //      break;    
 505          //    case GPIO2:
 506          //      P2EXTIF = 0xff &(~(1<<PinNum));
 507          //      break;  
 508          //    case GPIO3:
 509          //      P3EXTIF = 0xff &(~(1<<PinNum));
 510          //      break;
 511          //    default:
 512          //      break;  
 513          //  }
 514          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1532    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
